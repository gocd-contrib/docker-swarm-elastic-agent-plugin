import groovy.xml.XmlUtil

import java.util.regex.Matcher
import java.util.regex.Pattern

def gitRevision = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "-n", "1", "--format=%H"
        standardOutput = hashStdOut
    }

    return hashStdOut.toString().trim()
}

def releaseRevision = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "--pretty=format:"
        standardOutput = hashStdOut
    }

    return hashStdOut.size().toString()
}

project.ext.gitRevision = gitRevision()
project.ext.distVersion = releaseRevision()
project.ext.fullVersion = "${version} (${gitRevision})"

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext.color = [
        ANSI_BOLD_WHITE: "\u001B[0;1m",
        ANSI_RESET     : "\u001B[0m",
        ANSI_RED       : "\u001B[31m",
        ANSI_GREEN     : "\u001B[32m",
        ANSI_YELLOW    : "\u001B[33m",
        ANSI_WHITE     : "\u001B[37m"
]

project.ext.symbols = [
        CHECK_MARK: "\u2714",
        NEUTRAL_FACE: "\u0CA0_\u0CA0",
        X_MARK: "\u2718"
]

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = 'utf-8'
    options.warnings = true
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xlint:-serial"
}

tasks.withType(Test) {
    maxParallelForks = 1

    jvmArgs '-Duser.country=US'
    jvmArgs '-Duser.language=en'

    testLogging {
        def previousFailed = false
        exceptionFormat 'full'

        beforeSuite { suite ->
            if (suite.name.startsWith("Test Run") || suite.name.startsWith("Gradle Worker")) return

            if (suite.parent != null && suite.className != null) {
                println(project.color.ANSI_BOLD_WHITE + suite.name + project.color.ANSI_RESET)
            }
        }

        beforeTest {
            if (previousFailed) {
                System.err.println("")
            }
        }

        afterTest { descriptor, result ->
            previousFailed = false
            def executionTime = (result.endTime - result.startTime) / 1000
            println("    ${resultIndicator(result)}$project.color.ANSI_RESET $descriptor.name $project.color.ANSI_YELLOW($executionTime seconds)$project.color.ANSI_RESET")

            if (result.failedTestCount > 0) {
                previousFailed = true
                println('')
                println(result.exception)
            }
        }

        afterSuite { desc, result ->
            if (desc.parent != null && desc.className != null) {
                println("")
            }

            if (!desc.parent) { // will match the outermost suite
                def failStyle = project.color.ANSI_RED
                def skipStyle = project.color.ANSI_YELLOW
                def summaryStyle = summaryStyle(result)

                if (result.failedTestCount > 0) {
                    failStyle = project.color.ANSI_RED
                }
                if (result.skippedTestCount > 0) {
                    skipStyle = project.color.ANSI_YELLOW
                }


                println("--------------------------------------------------------------------------")
                println("Results: $summaryStyle$result.resultType$project.color.ANSI_RESET ($result.testCount tests, $project.color.ANSI_GREEN$result.successfulTestCount passed$project.color.ANSI_RESET, $failStyle$result.failedTestCount failed$project.color.ANSI_RESET, $skipStyle$result.skippedTestCount skipped$project.color.ANSI_RESET)")
                println("--------------------------------------------------------------------------")
            }
        }
    }
}

private String summaryStyle(result) {
    def summaryStyle = project.color.ANSI_WHITE
    switch (result.resultType) {
        case TestResult.ResultType.SUCCESS:
            summaryStyle = project.color.ANSI_GREEN
            break
        case TestResult.ResultType.FAILURE:
            summaryStyle = project.color.ANSI_RED
            break
    }
    summaryStyle
}

private String resultIndicator(result) {
    def indicator = project.color.ANSI_WHITE

    if (result.failedTestCount > 0) {
        indicator = project.color.ANSI_RED + project.symbols.X_MARK
    } else if (result.skippedTestCount > 0) {
        indicator = project.color.ANSI_YELLOW + project.symbols.NEUTRAL_FACE
    } else {
        indicator = project.color.ANSI_GREEN + project.symbols.CHECK_MARK
    }
    indicator
}


task releaseNotes {
    outputs.upToDateWhen { false }
    def releaseNotesHTMLFile = file("${project.getBuildDir()}/release-notes.html")

    inputs.property('distVersion', project.distVersion)
    inputs.property('gitRevision', project.gitRevision)

    outputs.file releaseNotesHTMLFile

    doLast {
        releaseNotesHTMLFile.getParentFile().mkdirs()
        String previousReleaseSha = execCommand("git", "rev-list", "--tags", "--max-count=1")
        String previousVersion = execCommand("git", "describe", "--tags", previousReleaseSha)
        String getLogSinceLastRelease = execCommand("git", "log", "--no-merges", "--pretty=format:%h %H %s", "${previousReleaseSha}..${rootProject.gitRevision}")
        String gitContributors = execCommand("git", 'shortlog', "-s", "--no-merges", "${previousReleaseSha}..${rootProject.gitRevision}")

        def collaborators = gitContributors.readLines().collect { line -> line.trim().split(/\s+/, 2).last() }

        releaseNotesHTMLFile.withWriter { html ->
            def bugfixes = new StringWriter()
            Pattern pattern = Pattern.compile(/#(\d+)/)
            getLogSinceLastRelease.eachLine { line ->
                def (String shortSha, String sha, String message) = line.split(/ /, 3)
                message = XmlUtil.escapeXml(message)
                bugfixes.write("<p>")
                bugfixes.write("""<a href="https://www.github.com/gocd/gocd/commit/${sha}"><code>${
                    shortSha
                }</code></a>""")
                bugfixes.write(" ")
                Matcher matcher = pattern.matcher(message)
                if (matcher.find()) {
                    bugfixes.write(matcher.replaceAll("""<a href="https://www.github.com/gocd/gocd/issues/\$1">#\$1</a>"""))
                } else {
                    bugfixes.write(message)
                }
                bugfixes.write("</p>")
                bugfixes.println("")
            }

            html.println("""<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Release Notes</title>
  <style>
    .release-notes p {
      margin: 1px;
      font-family:monospace;
    }
  </style>
</head>
<body>
<div class='release-notes'>
<h1>Issues and Bug fixes</h1>
${bugfixes}
<h1>Contributors</h1>
${collaborators.join(", ")}
</div>
</body>
</html>
""")
            html.println()
        }
    }
}

private String execCommand(String... cmd) {
    println String.join(" ", cmd)
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream()
    exec {
        commandLine cmd
        standardOutput = outputStream
    }
    def result = outputStream.toString()
    if (result.endsWith("\n")) {
        result = result.substring(0, result.length() - 2)
    }

    result
}
